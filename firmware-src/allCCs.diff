diff --git a/controller/storage.cc b/controller/storage.cc
index 499533c..fe208dc 100755
--- a/controller/storage.cc
+++ b/controller/storage.cc
@@ -29,6 +29,7 @@
 #include "controller/multi.h"
 #include "controller/system_settings.h"
 #include "controller/ui.h"
+#include "controller/parameter.h"
 
 namespace ambika {
 
@@ -383,6 +384,37 @@ void Storage::SysExSendRaw(
   midi_dispatcher.Flush();
 }
 
+
+/* static */
+void Storage::SendAllCCs(uint8_t part)
+{
+  // get midi channel of the part
+  const Parameter& parameter = parameter_manager.parameter(59);
+  if (parameter.offset != PRM_MULTI_MIDI_CHANNEL) return;
+  uint8_t midi_channel = parameter_manager.GetValue(parameter, part, part);
+  if (midi_channel>0) --midi_channel;
+
+  for (uint8_t index=0; index<kNumParameters; ++index) {
+    const Parameter& parameter = parameter_manager.parameter(index);
+    if(parameter.level == PARAMETER_LEVEL_PATCH || parameter.level == PARAMETER_LEVEL_PART) {
+      uint8_t midi_cc = parameter.midi_cc;
+      if ( (midi_cc < 1) || (midi_cc > 106)) continue;
+      for (uint8_t instance_index = 0; instance_index < parameter.num_instances; ++instance_index) {
+        uint8_t vorig = parameter_manager.GetValue(parameter, part, instance_index);
+        //uint8_t value = parameter.Scale(vorig);
+        uint8_t value = vorig;
+
+        //midi_dispatcher.Send3(0xb0 | midi_channel, midi_cc, value);
+        midi_dispatcher.SendBlocking(0xb0 | midi_channel);
+        midi_dispatcher.SendBlocking(midi_cc);
+        midi_dispatcher.SendBlocking(value);
+        midi_dispatcher.Flush();
+        midi_cc += parameter.stride; //WTF?
+      }
+    }
+  }
+}
+
 /* static */
 void Storage::RIFFWriteObject(const StorageLocation& location) {
   const uint8_t* data = object_data(location);
@@ -693,6 +725,7 @@ void Storage::SysExParseCommand() {
     case 0x13:
     case 0x14:
     case 0x15:
+    case 0x16:
       // Request commands have no data.
       sysex_rx_expected_size_ = 0;
       break;
@@ -748,6 +781,9 @@ void Storage::SysExAcceptCommand() {
       location.object = static_cast<StorageObject>(sysex_rx_command_[0] - 0x11);
       SysExSend(location);
       break;
+    case 0x16:
+      SendAllCCs(location.part);
+      break;
       
     case 0x1f:
       // PEEK
@@ -812,17 +848,17 @@ void Storage::SysExReceive(uint8_t byte) {
           sysex_rx_state_ = RECEIVING_FOOTER;
         }
       }
-    break;
-
-  case RECEIVING_FOOTER:
-    if (byte == 0xf7 &&
-        sysex_rx_checksum_ == buffer_[sysex_rx_expected_size_] &&
-        system_settings.rx_sysex()) {
-      SysExAcceptCommand();
-    } else {
-      sysex_rx_state_ = RECEPTION_ERROR;
-    }
-    break;
+      break;
+
+    case RECEIVING_FOOTER:
+      if (byte == 0xf7 &&
+          sysex_rx_checksum_ == buffer_[sysex_rx_expected_size_] &&
+          system_settings.rx_sysex()) {
+        SysExAcceptCommand();
+      } else {
+        sysex_rx_state_ = RECEPTION_ERROR;
+      }
+      break;
   }
 }
 
diff --git a/controller/storage.h b/controller/storage.h
index 0514fcc..19465a3 100755
--- a/controller/storage.h
+++ b/controller/storage.h
@@ -202,6 +202,7 @@ class Storage {
   static void SysExSendRaw(uint8_t, uint8_t, const uint8_t*, uint8_t, bool);
   static void RIFFWriteObject(const StorageLocation& location);
   static void TouchObject(const StorageLocation& location);
+  static void SendAllCCs(uint8_t part);
 
   static void SysExParseCommand();
   static void SysExAcceptCommand();
